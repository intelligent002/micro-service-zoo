/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: project.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace project {
    export class CreateProjectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): CreateProjectRequest {
            const message = new CreateProjectRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateProjectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateProjectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateProjectRequest {
            return CreateProjectRequest.deserialize(bytes);
        }
    }
    export class CreateProjectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            project?: Project;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("project" in data && data.project != undefined) {
                    this.project = data.project;
                }
            }
        }
        get project() {
            return pb_1.Message.getWrapperField(this, Project, 1) as Project;
        }
        set project(value: Project) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_project() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            project?: ReturnType<typeof Project.prototype.toObject>;
        }): CreateProjectResponse {
            const message = new CreateProjectResponse({});
            if (data.project != null) {
                message.project = Project.fromObject(data.project);
            }
            return message;
        }
        toObject() {
            const data: {
                project?: ReturnType<typeof Project.prototype.toObject>;
            } = {};
            if (this.project != null) {
                data.project = this.project.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_project)
                writer.writeMessage(1, this.project, () => this.project.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateProjectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateProjectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.project, () => message.project = Project.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateProjectResponse {
            return CreateProjectResponse.deserialize(bytes);
        }
    }
    export class Empty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Empty {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    export class ListProjectsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projects?: Project[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projects" in data && data.projects != undefined) {
                    this.projects = data.projects;
                }
            }
        }
        get projects() {
            return pb_1.Message.getRepeatedWrapperField(this, Project, 1) as Project[];
        }
        set projects(value: Project[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            projects?: ReturnType<typeof Project.prototype.toObject>[];
        }): ListProjectsResponse {
            const message = new ListProjectsResponse({});
            if (data.projects != null) {
                message.projects = data.projects.map(item => Project.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                projects?: ReturnType<typeof Project.prototype.toObject>[];
            } = {};
            if (this.projects != null) {
                data.projects = this.projects.map((item: Project) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projects.length)
                writer.writeRepeatedMessage(1, this.projects, (item: Project) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListProjectsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListProjectsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.projects, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Project.deserialize(reader), Project));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListProjectsResponse {
            return ListProjectsResponse.deserialize(bytes);
        }
    }
    export class CreateTaskRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projectId?: number;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set projectId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            projectId?: number;
            name?: string;
        }): CreateTaskRequest {
            const message = new CreateTaskRequest({});
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                projectId?: number;
                name?: string;
            } = {};
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projectId != 0)
                writer.writeInt32(1, this.projectId);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTaskRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTaskRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.projectId = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTaskRequest {
            return CreateTaskRequest.deserialize(bytes);
        }
    }
    export class CreateTaskResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            task?: Task;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("task" in data && data.task != undefined) {
                    this.task = data.task;
                }
            }
        }
        get task() {
            return pb_1.Message.getWrapperField(this, Task, 1) as Task;
        }
        set task(value: Task) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_task() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            task?: ReturnType<typeof Task.prototype.toObject>;
        }): CreateTaskResponse {
            const message = new CreateTaskResponse({});
            if (data.task != null) {
                message.task = Task.fromObject(data.task);
            }
            return message;
        }
        toObject() {
            const data: {
                task?: ReturnType<typeof Task.prototype.toObject>;
            } = {};
            if (this.task != null) {
                data.task = this.task.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_task)
                writer.writeMessage(1, this.task, () => this.task.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTaskResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTaskResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.task, () => message.task = Task.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTaskResponse {
            return CreateTaskResponse.deserialize(bytes);
        }
    }
    export class MigrateTaskRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            taskId?: number;
            newProjectId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("taskId" in data && data.taskId != undefined) {
                    this.taskId = data.taskId;
                }
                if ("newProjectId" in data && data.newProjectId != undefined) {
                    this.newProjectId = data.newProjectId;
                }
            }
        }
        get taskId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set taskId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get newProjectId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set newProjectId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            taskId?: number;
            newProjectId?: number;
        }): MigrateTaskRequest {
            const message = new MigrateTaskRequest({});
            if (data.taskId != null) {
                message.taskId = data.taskId;
            }
            if (data.newProjectId != null) {
                message.newProjectId = data.newProjectId;
            }
            return message;
        }
        toObject() {
            const data: {
                taskId?: number;
                newProjectId?: number;
            } = {};
            if (this.taskId != null) {
                data.taskId = this.taskId;
            }
            if (this.newProjectId != null) {
                data.newProjectId = this.newProjectId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.taskId != 0)
                writer.writeInt32(1, this.taskId);
            if (this.newProjectId != 0)
                writer.writeInt32(2, this.newProjectId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MigrateTaskRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MigrateTaskRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.taskId = reader.readInt32();
                        break;
                    case 2:
                        message.newProjectId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MigrateTaskRequest {
            return MigrateTaskRequest.deserialize(bytes);
        }
    }
    export class MigrateTaskResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            task?: Task;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("task" in data && data.task != undefined) {
                    this.task = data.task;
                }
            }
        }
        get task() {
            return pb_1.Message.getWrapperField(this, Task, 1) as Task;
        }
        set task(value: Task) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_task() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            task?: ReturnType<typeof Task.prototype.toObject>;
        }): MigrateTaskResponse {
            const message = new MigrateTaskResponse({});
            if (data.task != null) {
                message.task = Task.fromObject(data.task);
            }
            return message;
        }
        toObject() {
            const data: {
                task?: ReturnType<typeof Task.prototype.toObject>;
            } = {};
            if (this.task != null) {
                data.task = this.task.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_task)
                writer.writeMessage(1, this.task, () => this.task.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MigrateTaskResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MigrateTaskResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.task, () => message.task = Task.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MigrateTaskResponse {
            return MigrateTaskResponse.deserialize(bytes);
        }
    }
    export class Project extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            createdAt?: string;
            updatedAt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set createdAt(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set updatedAt(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            createdAt?: string;
            updatedAt?: string;
        }): Project {
            const message = new Project({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                createdAt?: string;
                updatedAt?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.createdAt.length)
                writer.writeString(3, this.createdAt);
            if (this.updatedAt.length)
                writer.writeString(4, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Project {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Project();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.createdAt = reader.readString();
                        break;
                    case 4:
                        message.updatedAt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Project {
            return Project.deserialize(bytes);
        }
    }
    export class Task extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            projectId?: number;
            name?: string;
            createdAt?: string;
            updatedAt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set projectId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set createdAt(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set updatedAt(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            projectId?: number;
            name?: string;
            createdAt?: string;
            updatedAt?: string;
        }): Task {
            const message = new Task({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                projectId?: number;
                name?: string;
                createdAt?: string;
                updatedAt?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.projectId != 0)
                writer.writeInt32(2, this.projectId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.createdAt.length)
                writer.writeString(4, this.createdAt);
            if (this.updatedAt.length)
                writer.writeString(5, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Task {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Task();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.projectId = reader.readInt32();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.createdAt = reader.readString();
                        break;
                    case 5:
                        message.updatedAt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Task {
            return Task.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedProjectServiceService {
        static definition = {
            CreateProject: {
                path: "/project.ProjectService/CreateProject",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateProjectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateProjectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateProjectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateProjectResponse.deserialize(new Uint8Array(bytes))
            },
            ListProjects: {
                path: "/project.ProjectService/ListProjects",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListProjectsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListProjectsResponse.deserialize(new Uint8Array(bytes))
            },
            CreateTask: {
                path: "/project.ProjectService/CreateTask",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateTaskRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateTaskRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateTaskResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateTaskResponse.deserialize(new Uint8Array(bytes))
            },
            MigrateTask: {
                path: "/project.ProjectService/MigrateTask",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MigrateTaskRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MigrateTaskRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MigrateTaskResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MigrateTaskResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateProject(call: grpc_1.ServerUnaryCall<CreateProjectRequest, CreateProjectResponse>, callback: grpc_1.sendUnaryData<CreateProjectResponse>): void;
        abstract ListProjects(call: grpc_1.ServerUnaryCall<Empty, ListProjectsResponse>, callback: grpc_1.sendUnaryData<ListProjectsResponse>): void;
        abstract CreateTask(call: grpc_1.ServerUnaryCall<CreateTaskRequest, CreateTaskResponse>, callback: grpc_1.sendUnaryData<CreateTaskResponse>): void;
        abstract MigrateTask(call: grpc_1.ServerUnaryCall<MigrateTaskRequest, MigrateTaskResponse>, callback: grpc_1.sendUnaryData<MigrateTaskResponse>): void;
    }
    export class ProjectServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedProjectServiceService.definition, "ProjectService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateProject: GrpcUnaryServiceInterface<CreateProjectRequest, CreateProjectResponse> = (message: CreateProjectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateProjectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateProjectResponse>, callback?: grpc_1.requestCallback<CreateProjectResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateProject(message, metadata, options, callback);
        };
        ListProjects: GrpcUnaryServiceInterface<Empty, ListProjectsResponse> = (message: Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListProjectsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListProjectsResponse>, callback?: grpc_1.requestCallback<ListProjectsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListProjects(message, metadata, options, callback);
        };
        CreateTask: GrpcUnaryServiceInterface<CreateTaskRequest, CreateTaskResponse> = (message: CreateTaskRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateTaskResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateTaskResponse>, callback?: grpc_1.requestCallback<CreateTaskResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateTask(message, metadata, options, callback);
        };
        MigrateTask: GrpcUnaryServiceInterface<MigrateTaskRequest, MigrateTaskResponse> = (message: MigrateTaskRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MigrateTaskResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MigrateTaskResponse>, callback?: grpc_1.requestCallback<MigrateTaskResponse>): grpc_1.ClientUnaryCall => {
            return super.MigrateTask(message, metadata, options, callback);
        };
    }
}
