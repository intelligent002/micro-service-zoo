# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dal_pb2 as dal__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dal_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ProjectServiceStub(object):
    """The ProjectService definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProjectCreate = channel.unary_unary(
                '/dal.ProjectService/ProjectCreate',
                request_serializer=dal__pb2.ProjectCreateRequest.SerializeToString,
                response_deserializer=dal__pb2.ProjectCreateResponse.FromString,
                _registered_method=True)
        self.ProjectList = channel.unary_unary(
                '/dal.ProjectService/ProjectList',
                request_serializer=dal__pb2.ProjectListRequest.SerializeToString,
                response_deserializer=dal__pb2.ProjectListResponse.FromString,
                _registered_method=True)
        self.ProjectUpdate = channel.unary_unary(
                '/dal.ProjectService/ProjectUpdate',
                request_serializer=dal__pb2.ProjectUpdateRequest.SerializeToString,
                response_deserializer=dal__pb2.ProjectUpdateResponse.FromString,
                _registered_method=True)
        self.ProjectDelete = channel.unary_unary(
                '/dal.ProjectService/ProjectDelete',
                request_serializer=dal__pb2.ProjectDeleteRequest.SerializeToString,
                response_deserializer=dal__pb2.ProjectDeleteResponse.FromString,
                _registered_method=True)


class ProjectServiceServicer(object):
    """The ProjectService definition
    """

    def ProjectCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProjectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProjectCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.ProjectCreate,
                    request_deserializer=dal__pb2.ProjectCreateRequest.FromString,
                    response_serializer=dal__pb2.ProjectCreateResponse.SerializeToString,
            ),
            'ProjectList': grpc.unary_unary_rpc_method_handler(
                    servicer.ProjectList,
                    request_deserializer=dal__pb2.ProjectListRequest.FromString,
                    response_serializer=dal__pb2.ProjectListResponse.SerializeToString,
            ),
            'ProjectUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.ProjectUpdate,
                    request_deserializer=dal__pb2.ProjectUpdateRequest.FromString,
                    response_serializer=dal__pb2.ProjectUpdateResponse.SerializeToString,
            ),
            'ProjectDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.ProjectDelete,
                    request_deserializer=dal__pb2.ProjectDeleteRequest.FromString,
                    response_serializer=dal__pb2.ProjectDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dal.ProjectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dal.ProjectService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProjectService(object):
    """The ProjectService definition
    """

    @staticmethod
    def ProjectCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dal.ProjectService/ProjectCreate',
            dal__pb2.ProjectCreateRequest.SerializeToString,
            dal__pb2.ProjectCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProjectList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dal.ProjectService/ProjectList',
            dal__pb2.ProjectListRequest.SerializeToString,
            dal__pb2.ProjectListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProjectUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dal.ProjectService/ProjectUpdate',
            dal__pb2.ProjectUpdateRequest.SerializeToString,
            dal__pb2.ProjectUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProjectDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dal.ProjectService/ProjectDelete',
            dal__pb2.ProjectDeleteRequest.SerializeToString,
            dal__pb2.ProjectDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TaskServiceStub(object):
    """The TaskService definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TaskCreate = channel.unary_unary(
                '/dal.TaskService/TaskCreate',
                request_serializer=dal__pb2.TaskCreateRequest.SerializeToString,
                response_deserializer=dal__pb2.TaskCreateResponse.FromString,
                _registered_method=True)
        self.TaskList = channel.unary_unary(
                '/dal.TaskService/TaskList',
                request_serializer=dal__pb2.TaskListRequest.SerializeToString,
                response_deserializer=dal__pb2.TaskListResponse.FromString,
                _registered_method=True)
        self.TaskUpdate = channel.unary_unary(
                '/dal.TaskService/TaskUpdate',
                request_serializer=dal__pb2.TaskUpdateRequest.SerializeToString,
                response_deserializer=dal__pb2.TaskUpdateResponse.FromString,
                _registered_method=True)
        self.TaskDelete = channel.unary_unary(
                '/dal.TaskService/TaskDelete',
                request_serializer=dal__pb2.TaskDeleteRequest.SerializeToString,
                response_deserializer=dal__pb2.TaskDeleteResponse.FromString,
                _registered_method=True)


class TaskServiceServicer(object):
    """The TaskService definition
    """

    def TaskCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TaskCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskCreate,
                    request_deserializer=dal__pb2.TaskCreateRequest.FromString,
                    response_serializer=dal__pb2.TaskCreateResponse.SerializeToString,
            ),
            'TaskList': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskList,
                    request_deserializer=dal__pb2.TaskListRequest.FromString,
                    response_serializer=dal__pb2.TaskListResponse.SerializeToString,
            ),
            'TaskUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskUpdate,
                    request_deserializer=dal__pb2.TaskUpdateRequest.FromString,
                    response_serializer=dal__pb2.TaskUpdateResponse.SerializeToString,
            ),
            'TaskDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskDelete,
                    request_deserializer=dal__pb2.TaskDeleteRequest.FromString,
                    response_serializer=dal__pb2.TaskDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dal.TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dal.TaskService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """The TaskService definition
    """

    @staticmethod
    def TaskCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dal.TaskService/TaskCreate',
            dal__pb2.TaskCreateRequest.SerializeToString,
            dal__pb2.TaskCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dal.TaskService/TaskList',
            dal__pb2.TaskListRequest.SerializeToString,
            dal__pb2.TaskListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dal.TaskService/TaskUpdate',
            dal__pb2.TaskUpdateRequest.SerializeToString,
            dal__pb2.TaskUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TaskDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dal.TaskService/TaskDelete',
            dal__pb2.TaskDeleteRequest.SerializeToString,
            dal__pb2.TaskDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
