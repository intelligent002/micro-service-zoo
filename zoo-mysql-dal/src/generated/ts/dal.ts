// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.20.3
// source: dal.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "dal";

export interface ProjectCreateRequest {
  /** Name of the project */
  name?: string | undefined;
}

export interface ProjectCreateResponse {
  /** The created project */
  project?: ProjectObject | undefined;
}

export interface ProjectListRequest {
}

export interface ProjectUpdateRequest {
  project?: ProjectObject | undefined;
}

export interface ProjectUpdateResponse {
  project?: ProjectObject | undefined;
}

export interface ProjectListResponse {
  /** List of all projects */
  projects: ProjectObject[];
}

export interface ProjectDeleteRequest {
  projectId?: ProjectId | undefined;
}

export interface ProjectDeleteResponse {
}

export interface ProjectId {
  /** Project ID */
  projectId?: number | undefined;
}

export interface ProjectObject {
  /** Project ID */
  id?:
    | ProjectId
    | undefined;
  /** Project name */
  name?:
    | string
    | undefined;
  /** Project creation date (ISO 8601) */
  createdAt?:
    | string
    | undefined;
  /** Project update date (ISO 8601) */
  updatedAt?: string | undefined;
}

export interface TaskCreateRequest {
  /** Name of the task */
  name?: string | undefined;
}

export interface TaskCreateResponse {
  /** The created task */
  task?: TaskObject | undefined;
}

export interface TaskListRequest {
  projectId?: ProjectId | undefined;
}

export interface TaskListResponse {
  /** List of all tasks in that project */
  tasks: TaskObject[];
}

export interface TaskUpdateRequest {
  task?: TaskObject | undefined;
}

export interface TaskUpdateResponse {
  task?: TaskObject | undefined;
}

export interface TaskDeleteRequest {
  taskId?: TaskId | undefined;
}

export interface TaskDeleteResponse {
}

export interface TaskMigrateRequest {
  taskId?: TaskId | undefined;
  projectId?: ProjectId | undefined;
}

export interface TaskMigrateResponse {
  task?: TaskObject | undefined;
}

export interface TaskId {
  /** Task ID */
  id?: number | undefined;
}

export interface TaskObject {
  /** Task ID */
  id?:
    | TaskId
    | undefined;
  /** Project ID the task belongs to */
  projectId?:
    | ProjectId
    | undefined;
  /** Task name */
  name?:
    | string
    | undefined;
  /** Task creation date (ISO 8601) */
  createdAt?:
    | string
    | undefined;
  /** Task update date (ISO 8601) */
  updatedAt?: string | undefined;
}

function createBaseProjectCreateRequest(): ProjectCreateRequest {
  return { name: undefined };
}

export const ProjectCreateRequest: MessageFns<ProjectCreateRequest> = {
  encode(message: ProjectCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectCreateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : undefined };
  },

  toJSON(message: ProjectCreateRequest): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectCreateRequest>, I>>(base?: I): ProjectCreateRequest {
    return ProjectCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectCreateRequest>, I>>(object: I): ProjectCreateRequest {
    const message = createBaseProjectCreateRequest();
    message.name = object.name ?? undefined;
    return message;
  },
};

function createBaseProjectCreateResponse(): ProjectCreateResponse {
  return { project: undefined };
}

export const ProjectCreateResponse: MessageFns<ProjectCreateResponse> = {
  encode(message: ProjectCreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== undefined) {
      ProjectObject.encode(message.project, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectCreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.project = ProjectObject.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectCreateResponse {
    return { project: isSet(object.project) ? ProjectObject.fromJSON(object.project) : undefined };
  },

  toJSON(message: ProjectCreateResponse): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = ProjectObject.toJSON(message.project);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectCreateResponse>, I>>(base?: I): ProjectCreateResponse {
    return ProjectCreateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectCreateResponse>, I>>(object: I): ProjectCreateResponse {
    const message = createBaseProjectCreateResponse();
    message.project = (object.project !== undefined && object.project !== null)
      ? ProjectObject.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseProjectListRequest(): ProjectListRequest {
  return {};
}

export const ProjectListRequest: MessageFns<ProjectListRequest> = {
  encode(_: ProjectListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ProjectListRequest {
    return {};
  },

  toJSON(_: ProjectListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectListRequest>, I>>(base?: I): ProjectListRequest {
    return ProjectListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectListRequest>, I>>(_: I): ProjectListRequest {
    const message = createBaseProjectListRequest();
    return message;
  },
};

function createBaseProjectUpdateRequest(): ProjectUpdateRequest {
  return { project: undefined };
}

export const ProjectUpdateRequest: MessageFns<ProjectUpdateRequest> = {
  encode(message: ProjectUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== undefined) {
      ProjectObject.encode(message.project, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.project = ProjectObject.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectUpdateRequest {
    return { project: isSet(object.project) ? ProjectObject.fromJSON(object.project) : undefined };
  },

  toJSON(message: ProjectUpdateRequest): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = ProjectObject.toJSON(message.project);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectUpdateRequest>, I>>(base?: I): ProjectUpdateRequest {
    return ProjectUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectUpdateRequest>, I>>(object: I): ProjectUpdateRequest {
    const message = createBaseProjectUpdateRequest();
    message.project = (object.project !== undefined && object.project !== null)
      ? ProjectObject.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseProjectUpdateResponse(): ProjectUpdateResponse {
  return { project: undefined };
}

export const ProjectUpdateResponse: MessageFns<ProjectUpdateResponse> = {
  encode(message: ProjectUpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== undefined) {
      ProjectObject.encode(message.project, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectUpdateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.project = ProjectObject.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectUpdateResponse {
    return { project: isSet(object.project) ? ProjectObject.fromJSON(object.project) : undefined };
  },

  toJSON(message: ProjectUpdateResponse): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = ProjectObject.toJSON(message.project);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectUpdateResponse>, I>>(base?: I): ProjectUpdateResponse {
    return ProjectUpdateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectUpdateResponse>, I>>(object: I): ProjectUpdateResponse {
    const message = createBaseProjectUpdateResponse();
    message.project = (object.project !== undefined && object.project !== null)
      ? ProjectObject.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseProjectListResponse(): ProjectListResponse {
  return { projects: [] };
}

export const ProjectListResponse: MessageFns<ProjectListResponse> = {
  encode(message: ProjectListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.projects) {
      ProjectObject.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projects.push(ProjectObject.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectListResponse {
    return {
      projects: globalThis.Array.isArray(object?.projects)
        ? object.projects.map((e: any) => ProjectObject.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ProjectListResponse): unknown {
    const obj: any = {};
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => ProjectObject.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectListResponse>, I>>(base?: I): ProjectListResponse {
    return ProjectListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectListResponse>, I>>(object: I): ProjectListResponse {
    const message = createBaseProjectListResponse();
    message.projects = object.projects?.map((e) => ProjectObject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProjectDeleteRequest(): ProjectDeleteRequest {
  return { projectId: undefined };
}

export const ProjectDeleteRequest: MessageFns<ProjectDeleteRequest> = {
  encode(message: ProjectDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== undefined) {
      ProjectId.encode(message.projectId, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = ProjectId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectDeleteRequest {
    return { projectId: isSet(object.projectId) ? ProjectId.fromJSON(object.projectId) : undefined };
  },

  toJSON(message: ProjectDeleteRequest): unknown {
    const obj: any = {};
    if (message.projectId !== undefined) {
      obj.projectId = ProjectId.toJSON(message.projectId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectDeleteRequest>, I>>(base?: I): ProjectDeleteRequest {
    return ProjectDeleteRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectDeleteRequest>, I>>(object: I): ProjectDeleteRequest {
    const message = createBaseProjectDeleteRequest();
    message.projectId = (object.projectId !== undefined && object.projectId !== null)
      ? ProjectId.fromPartial(object.projectId)
      : undefined;
    return message;
  },
};

function createBaseProjectDeleteResponse(): ProjectDeleteResponse {
  return {};
}

export const ProjectDeleteResponse: MessageFns<ProjectDeleteResponse> = {
  encode(_: ProjectDeleteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectDeleteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectDeleteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ProjectDeleteResponse {
    return {};
  },

  toJSON(_: ProjectDeleteResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectDeleteResponse>, I>>(base?: I): ProjectDeleteResponse {
    return ProjectDeleteResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectDeleteResponse>, I>>(_: I): ProjectDeleteResponse {
    const message = createBaseProjectDeleteResponse();
    return message;
  },
};

function createBaseProjectId(): ProjectId {
  return { projectId: undefined };
}

export const ProjectId: MessageFns<ProjectId> = {
  encode(message: ProjectId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== undefined) {
      writer.uint32(8).int32(message.projectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.projectId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectId {
    return { projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : undefined };
  },

  toJSON(message: ProjectId): unknown {
    const obj: any = {};
    if (message.projectId !== undefined) {
      obj.projectId = Math.round(message.projectId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectId>, I>>(base?: I): ProjectId {
    return ProjectId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectId>, I>>(object: I): ProjectId {
    const message = createBaseProjectId();
    message.projectId = object.projectId ?? undefined;
    return message;
  },
};

function createBaseProjectObject(): ProjectObject {
  return { id: undefined, name: undefined, createdAt: undefined, updatedAt: undefined };
}

export const ProjectObject: MessageFns<ProjectObject> = {
  encode(message: ProjectObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      ProjectId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(26).string(message.createdAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(34).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = ProjectId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectObject {
    return {
      id: isSet(object.id) ? ProjectId.fromJSON(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : undefined,
    };
  },

  toJSON(message: ProjectObject): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ProjectId.toJSON(message.id);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectObject>, I>>(base?: I): ProjectObject {
    return ProjectObject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectObject>, I>>(object: I): ProjectObject {
    const message = createBaseProjectObject();
    message.id = (object.id !== undefined && object.id !== null) ? ProjectId.fromPartial(object.id) : undefined;
    message.name = object.name ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseTaskCreateRequest(): TaskCreateRequest {
  return { name: undefined };
}

export const TaskCreateRequest: MessageFns<TaskCreateRequest> = {
  encode(message: TaskCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskCreateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : undefined };
  },

  toJSON(message: TaskCreateRequest): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskCreateRequest>, I>>(base?: I): TaskCreateRequest {
    return TaskCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskCreateRequest>, I>>(object: I): TaskCreateRequest {
    const message = createBaseTaskCreateRequest();
    message.name = object.name ?? undefined;
    return message;
  },
};

function createBaseTaskCreateResponse(): TaskCreateResponse {
  return { task: undefined };
}

export const TaskCreateResponse: MessageFns<TaskCreateResponse> = {
  encode(message: TaskCreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      TaskObject.encode(message.task, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskCreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = TaskObject.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskCreateResponse {
    return { task: isSet(object.task) ? TaskObject.fromJSON(object.task) : undefined };
  },

  toJSON(message: TaskCreateResponse): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = TaskObject.toJSON(message.task);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskCreateResponse>, I>>(base?: I): TaskCreateResponse {
    return TaskCreateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskCreateResponse>, I>>(object: I): TaskCreateResponse {
    const message = createBaseTaskCreateResponse();
    message.task = (object.task !== undefined && object.task !== null)
      ? TaskObject.fromPartial(object.task)
      : undefined;
    return message;
  },
};

function createBaseTaskListRequest(): TaskListRequest {
  return { projectId: undefined };
}

export const TaskListRequest: MessageFns<TaskListRequest> = {
  encode(message: TaskListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== undefined) {
      ProjectId.encode(message.projectId, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = ProjectId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskListRequest {
    return { projectId: isSet(object.projectId) ? ProjectId.fromJSON(object.projectId) : undefined };
  },

  toJSON(message: TaskListRequest): unknown {
    const obj: any = {};
    if (message.projectId !== undefined) {
      obj.projectId = ProjectId.toJSON(message.projectId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskListRequest>, I>>(base?: I): TaskListRequest {
    return TaskListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskListRequest>, I>>(object: I): TaskListRequest {
    const message = createBaseTaskListRequest();
    message.projectId = (object.projectId !== undefined && object.projectId !== null)
      ? ProjectId.fromPartial(object.projectId)
      : undefined;
    return message;
  },
};

function createBaseTaskListResponse(): TaskListResponse {
  return { tasks: [] };
}

export const TaskListResponse: MessageFns<TaskListResponse> = {
  encode(message: TaskListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tasks) {
      TaskObject.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tasks.push(TaskObject.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskListResponse {
    return {
      tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e: any) => TaskObject.fromJSON(e)) : [],
    };
  },

  toJSON(message: TaskListResponse): unknown {
    const obj: any = {};
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => TaskObject.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskListResponse>, I>>(base?: I): TaskListResponse {
    return TaskListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskListResponse>, I>>(object: I): TaskListResponse {
    const message = createBaseTaskListResponse();
    message.tasks = object.tasks?.map((e) => TaskObject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTaskUpdateRequest(): TaskUpdateRequest {
  return { task: undefined };
}

export const TaskUpdateRequest: MessageFns<TaskUpdateRequest> = {
  encode(message: TaskUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      TaskObject.encode(message.task, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = TaskObject.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskUpdateRequest {
    return { task: isSet(object.task) ? TaskObject.fromJSON(object.task) : undefined };
  },

  toJSON(message: TaskUpdateRequest): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = TaskObject.toJSON(message.task);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskUpdateRequest>, I>>(base?: I): TaskUpdateRequest {
    return TaskUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskUpdateRequest>, I>>(object: I): TaskUpdateRequest {
    const message = createBaseTaskUpdateRequest();
    message.task = (object.task !== undefined && object.task !== null)
      ? TaskObject.fromPartial(object.task)
      : undefined;
    return message;
  },
};

function createBaseTaskUpdateResponse(): TaskUpdateResponse {
  return { task: undefined };
}

export const TaskUpdateResponse: MessageFns<TaskUpdateResponse> = {
  encode(message: TaskUpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      TaskObject.encode(message.task, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskUpdateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = TaskObject.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskUpdateResponse {
    return { task: isSet(object.task) ? TaskObject.fromJSON(object.task) : undefined };
  },

  toJSON(message: TaskUpdateResponse): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = TaskObject.toJSON(message.task);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskUpdateResponse>, I>>(base?: I): TaskUpdateResponse {
    return TaskUpdateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskUpdateResponse>, I>>(object: I): TaskUpdateResponse {
    const message = createBaseTaskUpdateResponse();
    message.task = (object.task !== undefined && object.task !== null)
      ? TaskObject.fromPartial(object.task)
      : undefined;
    return message;
  },
};

function createBaseTaskDeleteRequest(): TaskDeleteRequest {
  return { taskId: undefined };
}

export const TaskDeleteRequest: MessageFns<TaskDeleteRequest> = {
  encode(message: TaskDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== undefined) {
      TaskId.encode(message.taskId, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = TaskId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskDeleteRequest {
    return { taskId: isSet(object.taskId) ? TaskId.fromJSON(object.taskId) : undefined };
  },

  toJSON(message: TaskDeleteRequest): unknown {
    const obj: any = {};
    if (message.taskId !== undefined) {
      obj.taskId = TaskId.toJSON(message.taskId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskDeleteRequest>, I>>(base?: I): TaskDeleteRequest {
    return TaskDeleteRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskDeleteRequest>, I>>(object: I): TaskDeleteRequest {
    const message = createBaseTaskDeleteRequest();
    message.taskId = (object.taskId !== undefined && object.taskId !== null)
      ? TaskId.fromPartial(object.taskId)
      : undefined;
    return message;
  },
};

function createBaseTaskDeleteResponse(): TaskDeleteResponse {
  return {};
}

export const TaskDeleteResponse: MessageFns<TaskDeleteResponse> = {
  encode(_: TaskDeleteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskDeleteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskDeleteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TaskDeleteResponse {
    return {};
  },

  toJSON(_: TaskDeleteResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskDeleteResponse>, I>>(base?: I): TaskDeleteResponse {
    return TaskDeleteResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskDeleteResponse>, I>>(_: I): TaskDeleteResponse {
    const message = createBaseTaskDeleteResponse();
    return message;
  },
};

function createBaseTaskMigrateRequest(): TaskMigrateRequest {
  return { taskId: undefined, projectId: undefined };
}

export const TaskMigrateRequest: MessageFns<TaskMigrateRequest> = {
  encode(message: TaskMigrateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== undefined) {
      TaskId.encode(message.taskId, writer.uint32(10).fork()).join();
    }
    if (message.projectId !== undefined) {
      ProjectId.encode(message.projectId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskMigrateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskMigrateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = TaskId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.projectId = ProjectId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskMigrateRequest {
    return {
      taskId: isSet(object.taskId) ? TaskId.fromJSON(object.taskId) : undefined,
      projectId: isSet(object.projectId) ? ProjectId.fromJSON(object.projectId) : undefined,
    };
  },

  toJSON(message: TaskMigrateRequest): unknown {
    const obj: any = {};
    if (message.taskId !== undefined) {
      obj.taskId = TaskId.toJSON(message.taskId);
    }
    if (message.projectId !== undefined) {
      obj.projectId = ProjectId.toJSON(message.projectId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskMigrateRequest>, I>>(base?: I): TaskMigrateRequest {
    return TaskMigrateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskMigrateRequest>, I>>(object: I): TaskMigrateRequest {
    const message = createBaseTaskMigrateRequest();
    message.taskId = (object.taskId !== undefined && object.taskId !== null)
      ? TaskId.fromPartial(object.taskId)
      : undefined;
    message.projectId = (object.projectId !== undefined && object.projectId !== null)
      ? ProjectId.fromPartial(object.projectId)
      : undefined;
    return message;
  },
};

function createBaseTaskMigrateResponse(): TaskMigrateResponse {
  return { task: undefined };
}

export const TaskMigrateResponse: MessageFns<TaskMigrateResponse> = {
  encode(message: TaskMigrateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      TaskObject.encode(message.task, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskMigrateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskMigrateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = TaskObject.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskMigrateResponse {
    return { task: isSet(object.task) ? TaskObject.fromJSON(object.task) : undefined };
  },

  toJSON(message: TaskMigrateResponse): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = TaskObject.toJSON(message.task);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskMigrateResponse>, I>>(base?: I): TaskMigrateResponse {
    return TaskMigrateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskMigrateResponse>, I>>(object: I): TaskMigrateResponse {
    const message = createBaseTaskMigrateResponse();
    message.task = (object.task !== undefined && object.task !== null)
      ? TaskObject.fromPartial(object.task)
      : undefined;
    return message;
  },
};

function createBaseTaskId(): TaskId {
  return { id: undefined };
}

export const TaskId: MessageFns<TaskId> = {
  encode(message: TaskId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskId {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : undefined };
  },

  toJSON(message: TaskId): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskId>, I>>(base?: I): TaskId {
    return TaskId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskId>, I>>(object: I): TaskId {
    const message = createBaseTaskId();
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBaseTaskObject(): TaskObject {
  return { id: undefined, projectId: undefined, name: undefined, createdAt: undefined, updatedAt: undefined };
}

export const TaskObject: MessageFns<TaskObject> = {
  encode(message: TaskObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      TaskId.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.projectId !== undefined) {
      ProjectId.encode(message.projectId, writer.uint32(18).fork()).join();
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(42).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = TaskId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.projectId = ProjectId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskObject {
    return {
      id: isSet(object.id) ? TaskId.fromJSON(object.id) : undefined,
      projectId: isSet(object.projectId) ? ProjectId.fromJSON(object.projectId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : undefined,
    };
  },

  toJSON(message: TaskObject): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = TaskId.toJSON(message.id);
    }
    if (message.projectId !== undefined) {
      obj.projectId = ProjectId.toJSON(message.projectId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskObject>, I>>(base?: I): TaskObject {
    return TaskObject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskObject>, I>>(object: I): TaskObject {
    const message = createBaseTaskObject();
    message.id = (object.id !== undefined && object.id !== null) ? TaskId.fromPartial(object.id) : undefined;
    message.projectId = (object.projectId !== undefined && object.projectId !== null)
      ? ProjectId.fromPartial(object.projectId)
      : undefined;
    message.name = object.name ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

/** The ProjectService definition */
export interface ProjectService {
  ProjectCreate(request: ProjectCreateRequest): Promise<ProjectCreateResponse>;
  ProjectList(request: ProjectListRequest): Promise<ProjectListResponse>;
  ProjectUpdate(request: ProjectUpdateRequest): Promise<ProjectUpdateResponse>;
  ProjectDelete(request: ProjectDeleteRequest): Promise<ProjectDeleteResponse>;
}

export const ProjectServiceServiceName = "dal.ProjectService";
export class ProjectServiceClientImpl implements ProjectService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ProjectServiceServiceName;
    this.rpc = rpc;
    this.ProjectCreate = this.ProjectCreate.bind(this);
    this.ProjectList = this.ProjectList.bind(this);
    this.ProjectUpdate = this.ProjectUpdate.bind(this);
    this.ProjectDelete = this.ProjectDelete.bind(this);
  }
  ProjectCreate(request: ProjectCreateRequest): Promise<ProjectCreateResponse> {
    const data = ProjectCreateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProjectCreate", data);
    return promise.then((data) => ProjectCreateResponse.decode(new BinaryReader(data)));
  }

  ProjectList(request: ProjectListRequest): Promise<ProjectListResponse> {
    const data = ProjectListRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProjectList", data);
    return promise.then((data) => ProjectListResponse.decode(new BinaryReader(data)));
  }

  ProjectUpdate(request: ProjectUpdateRequest): Promise<ProjectUpdateResponse> {
    const data = ProjectUpdateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProjectUpdate", data);
    return promise.then((data) => ProjectUpdateResponse.decode(new BinaryReader(data)));
  }

  ProjectDelete(request: ProjectDeleteRequest): Promise<ProjectDeleteResponse> {
    const data = ProjectDeleteRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProjectDelete", data);
    return promise.then((data) => ProjectDeleteResponse.decode(new BinaryReader(data)));
  }
}

/** The TaskService definition */
export interface TaskService {
  TaskCreate(request: TaskCreateRequest): Promise<TaskCreateResponse>;
  TaskList(request: TaskListRequest): Promise<TaskListResponse>;
  TaskUpdate(request: TaskUpdateRequest): Promise<TaskUpdateResponse>;
  TaskDelete(request: TaskDeleteRequest): Promise<TaskDeleteResponse>;
}

export const TaskServiceServiceName = "dal.TaskService";
export class TaskServiceClientImpl implements TaskService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TaskServiceServiceName;
    this.rpc = rpc;
    this.TaskCreate = this.TaskCreate.bind(this);
    this.TaskList = this.TaskList.bind(this);
    this.TaskUpdate = this.TaskUpdate.bind(this);
    this.TaskDelete = this.TaskDelete.bind(this);
  }
  TaskCreate(request: TaskCreateRequest): Promise<TaskCreateResponse> {
    const data = TaskCreateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TaskCreate", data);
    return promise.then((data) => TaskCreateResponse.decode(new BinaryReader(data)));
  }

  TaskList(request: TaskListRequest): Promise<TaskListResponse> {
    const data = TaskListRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TaskList", data);
    return promise.then((data) => TaskListResponse.decode(new BinaryReader(data)));
  }

  TaskUpdate(request: TaskUpdateRequest): Promise<TaskUpdateResponse> {
    const data = TaskUpdateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TaskUpdate", data);
    return promise.then((data) => TaskUpdateResponse.decode(new BinaryReader(data)));
  }

  TaskDelete(request: TaskDeleteRequest): Promise<TaskDeleteResponse> {
    const data = TaskDeleteRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TaskDelete", data);
    return promise.then((data) => TaskDeleteResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
