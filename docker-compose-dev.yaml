services:

    # MySQL Service
    zoo-mysql:
        image: mysql:8.0
        container_name: zoo-mysql
        restart: unless-stopped
        environment:
            MYSQL_ROOT_PASSWORD: root-password
            MYSQL_DATABASE: zoo-db
            MYSQL_USER: zoo-user
            MYSQL_PASSWORD: zoo-password
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
            interval: 30s
            retries: 5
            start_period: 20s
            timeout: 10s
        ports:
            - "3306:3306"
        volumes:
            - mysql-data:/var/lib/mysql
        networks:
            - zoo

    # Backend written in PHP/Laravel (php:8.2-fpm-alpine)
    zoo-php-laravel:
        build:
            context: ./zoo-php-laravel # Set build context to the respective folder
            dockerfile: Dockerfile
            args:
                APP_URL: "http://localhost:8003/"
        container_name: zoo-php-laravel
        restart: unless-stopped
        environment:
            - APP_URL=http://localhost:8003/
            - DB_HOSTNAME=zoo-mysql
            - DB_PASSWORD=zoo-password
            - DB_DATABASE=zoo-db
            - DB_USERNAME=zoo-user
        healthcheck:
            test: ["CMD-SHELL", "REQUEST_URI=/rest/liveness SCRIPT_FILENAME=/var/www/html/public/index.php REQUEST_METHOD=GET cgi-fcgi -bind -connect 127.0.0.1:8003 | sed -n '/^{/,$$p' | jq -e '.status == \"OK\"' > /dev/null || exit 1"]
            interval: 30s
            retries: 3
            start_period: 5s
            timeout: 10s
        ports:
            - "8003:8003"
        depends_on:
            - zoo-mysql
        command: /bin/sh -c "php artisan migrate --force && php-fpm"
        networks:
            - zoo

    # HTTP to PHP-FPM converter
    zoo-http2fpm:
        image: docker.artifactory.intel.r7g.org/nginx:latest
        container_name: zoo-http2fpm
        restart: unless-stopped
        volumes:
            - ./zoo-nginx/http2fpm.conf:/etc/nginx/conf.d/default.conf:ro  # Use custom NGINX config
            - ./zoo-nginx/probe/:/var/www/html/
        healthcheck:
            test: ["CMD-SHELL", "if [ $(curl -s http://localhost:8004/liveness ) != '{\"status\":\"OK\"}' ]; then exit 1; fi"]
            interval: 30s
            retries: 3
            start_period: 5s
            timeout: 10s
        ports:
            - "8004:8004"
        networks:
            - zoo


    # Backend written in Python/Flask (python:3.12.5-alpine3.20)
    zoo-python-flask:
        build:
            context: ./zoo-python-flask # Set build context to the respective folder
            dockerfile: Dockerfile
        container_name: zoo-python-flask
        restart: unless-stopped
        environment:
            - DB_HOSTNAME=zoo-mysql
            - DB_USERNAME=zoo-user
            - DB_PASSWORD=zoo-password
            - DB_DATABASE=zoo-db
            - DEBUG_MODE=False
            - LOG_LEVEL=DEBUG
        healthcheck:
            test: ["CMD-SHELL", "if [ $(curl -s http://localhost:8001/graphql/liveness | jq -r .status) != \"OK\" ]; then exit 1; fi"]
            interval: 30s
            retries: 3
            start_period: 5s
            timeout: 10s
        ports:
            - "8001:8001"
        depends_on:
            - zoo-mysql
        networks:
            - zoo

    # NGINX Service (Reverse Proxy + Caching + Static File Serving)
    zoo-router:
        image: docker.artifactory.intel.r7g.org/nginx:latest
        container_name: zoo-router
        restart: unless-stopped
        ports:
            - "82:80"
        volumes:
            - ./zoo-nginx/router.conf:/etc/nginx/conf.d/default.conf:ro  # Use custom NGINX config
            - ./zoo-nginx/probe/:/var/www/html/
        healthcheck:
            test: ["CMD-SHELL", "if [ $(curl -s http://localhost:80/liveness ) != '{\"status\":\"OK\"}' ]; then exit 1; fi"]
            interval: 30s
            retries: 3
            start_period: 5s
            timeout: 10s
        depends_on:
            - zoo-python-flask
            - zoo-http2fpm
            - zoo-mysql
        networks:
            - zoo

# Named volumes for persistent data storage
volumes:
    mysql-data:

# Shared network between the containers
networks:
    zoo:
        driver: bridge
