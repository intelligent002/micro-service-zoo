services:

    # MySQL Service
    zoo-mysql:
        image: docker.artifactory.intel.r7g.org/mysql:8.0
        container_name: zoo-mysql
        restart: unless-stopped
        ports:
            - "3306:3306"
        environment:
            MYSQL_ROOT_PASSWORD: root-password
            MYSQL_DATABASE: zoo-db
            MYSQL_USER: zoo-user
            MYSQL_PASSWORD: zoo-password
            MYSQL_HOSTNAME: localhost
        volumes:
            - mysql-data:/var/lib/mysql
            - ./zoo-mysql/mysql-health.sh:/mysql-health.sh
        entrypoint: ["/bin/bash", "-c", "chmod +x /mysql-health.sh && docker-entrypoint.sh mysqld"]
        healthcheck:
            # Test availabiltiy of mysql service, listening & serving - via mounted script
            test: [ "CMD", "/mysql-health.sh" ]
            interval: 60s
            retries: 5
            start_period: 20s
            timeout: 10s
        networks:
            - zoo

    # Backend written in Python/Flask (python:3.12.5-alpine3.20)
    zoo-python-flask:
        build:
            context: ./zoo-python-flask # Set build context to the respective folder
            dockerfile: Dockerfile
        container_name: zoo-python-flask
        restart: unless-stopped
        environment:
            - DB_HOSTNAME=zoo-mysql
            - DB_USERNAME=zoo-user
            - DB_PASSWORD=zoo-password
            - DB_DATABASE=zoo-db
            - DEBUG_MODE=True
            - LOG_LEVEL=DEBUG
        healthcheck:
            # Test availabiltiy of gunicorn service, listening & serving - via inline curl request parsed by JQ
            test: ["CMD-SHELL", "if [ $(curl -s http://localhost:8001/graphql/liveness | jq -r .status) != \"OK\" ]; then exit 1; fi"]
            interval: 60s
            retries: 3
            start_period: 5s
            timeout: 10s
        ports:
            - "8001:8001"
        depends_on:
            - zoo-mysql
        networks:
            - zoo

    # Frontend written in TypeScript/React (node:18-alpine3.20)
    zoo-typescript-react:
        build:
            context: ./zoo-typescript-react # Set build context to the respective folder
            dockerfile: Dockerfile
        container_name: zoo-typescript-react
        restart: unless-stopped
        environment:
            - LOG_LEVEL=DEBUG
        healthcheck:
            # Test availabiltiy of nginx service, listening & serving - via inline curl request compared as is
            test: ["CMD-SHELL", "if [ $(curl -s http://localhost:8002/liveness ) != '{\"status\":\"OK\"}' ]; then exit 1; fi"]
            interval: 60s
            retries: 3
            start_period: 5s
            timeout: 10s
        ports:
            - "8002:8002"
        depends_on:
            - zoo-python-flask
        networks:
            - zoo

    # Backend written in PHP/Laravel (php:8.2-fpm)
    zoo-php-laravel:
        build:
            context: ./zoo-php-laravel # Set build context to the respective folder
            dockerfile: Dockerfile
            args:
                APP_URL: "http://localhost:8003/"
        container_name: zoo-php-laravel
        restart: unless-stopped
        environment:
            - APP_URL=http://localhost:8003/
            - DB_HOSTNAME=zoo-mysql
            - DB_PASSWORD=zoo-password
            - DB_DATABASE=zoo-db
            - DB_USERNAME=zoo-user
        volumes:
            - ./zoo-mysql/mysql-wait.sh:/mysql-wait.sh
        healthcheck:
            # Test availabiltiy of php-fpm service, listening & serving - via inline cgi-fcgi request parsed by JQ
            test: ["CMD-SHELL", "REQUEST_URI=/rest/liveness SCRIPT_FILENAME=/var/www/html/public/index.php REQUEST_METHOD=GET cgi-fcgi -bind -connect 127.0.0.1:8003 | sed -n '/^{/,$$p' | jq -e '.status == \"OK\"' > /dev/null || exit 1"]
            interval: 60s
            retries: 3
            start_period: 5s
            timeout: 10s
        ports:
            - "8003:8003"
        depends_on:
            - zoo-mysql
        # dont start the migrations before mysql is really ready to serve requests
        command: ["/bin/sh", "-c", "chmod +x /mysql-wait.sh && /mysql-wait.sh && php artisan migrate --force && php-fpm"]
        networks:
            - zoo

    # NGINX Service (Reverse Proxy + HTTP to PHP-FPM converter + Static File Serving)
    zoo-php-laravel-http2fpm:
        image: docker.artifactory.intel.r7g.org/nginx:1.27.1-alpine-slim
        container_name: zoo-php-laravel-http2fpm
        restart: unless-stopped
        volumes:
            - ./zoo-php-laravel-http2fpm/http2fpm.conf:/etc/nginx/conf.d/default.conf:ro  # Use custom NGINX config
            - ./zoo-php-laravel-http2fpm/probe/:/var/www/html/
        healthcheck:
            # Test availabiltiy of nginx service, listening & serving - via inline curl request compared as is
            test: ["CMD-SHELL", "if [ $(curl -s http://localhost:8004/liveness ) != '{\"status\":\"OK\"}' ]; then exit 1; fi"]
            interval: 60s
            retries: 3
            start_period: 5s
            timeout: 10s
        depends_on:
            - zoo-php-laravel
        ports:
            - "8004:8004"
        networks:
            - zoo

    # NGINX Service (Routing + Reverse Proxy + Caching + Static File Serving)
    zoo-router:
        image: docker.artifactory.intel.r7g.org/nginx:1.27.1-alpine-slim
        container_name: zoo-router
        restart: unless-stopped
        ports:
            - "82:80"
        volumes:
            - ./zoo-router/router.conf:/etc/nginx/conf.d/default.conf:ro  # Use custom NGINX config
            - ./zoo-router/probe/:/var/www/html/
        healthcheck:
            # Test availabiltiy of nginx service, listening & serving - via inline curl request compared as is
            test: ["CMD-SHELL", "if [ $(curl -s http://localhost:80/liveness ) != '{\"status\":\"OK\"}' ]; then exit 1; fi"]
            interval: 60s
            retries: 3
            start_period: 5s
            timeout: 10s
        depends_on:
            - zoo-typescript-react
            - zoo-python-flask
            - zoo-php-laravel-http2fpm
        networks:
            - zoo

# Named volumes for persistent data storage
volumes:
    mysql-data:

# Shared network between the containers
networks:
    zoo:
        driver: bridge
