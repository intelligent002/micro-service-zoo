services:

    # Prometheus
    zoo-prometheus:
        build:
            context: ./zoo-prometheus
            dockerfile: Dockerfile
        container_name: zoo-prometheus
        command:
            - --config.file=/etc/prometheus/prometheus.yml
            - --web.enable-lifecycle
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:9090/-/healthy || exit 1"]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        volumes:
            - ./zoo-prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - ./zoo-prometheus/rules/:/etc/prometheus/rules/
            - prometheus-data:/prometheus
        ports:
            - "9091:9090"
        networks:
            - zoo

    zoo-alert-manager:
        build:
            context: ./zoo-alert-manager
            dockerfile: Dockerfile
        container_name: zoo-alert-manager
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:9093/-/healthy || exit 1"]
            interval: 60s
            retries: 3
            start_period: 10s
            timeout: 10s
        volumes:
            - ./zoo-alert-manager/alertmanager.yml:/etc/alertmanager/config.yml
            - alert-manager-data:/alertmanager
        ports:
            - "9093:9093"
        command:
            - --config.file=/etc/alertmanager/config.yml
        depends_on:
            - zoo-prometheus
        networks:
            - zoo

    zoo-node-exporter:
        build:
            context: ./zoo-node-exporter
            dockerfile: Dockerfile
        container_name: zoo-node-exporter
        ports:
            - "9100:9100"
        networks:
            - zoo
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:9100/metrics || exit 1"]
            interval: 60s
            retries: 3
            start_period: 10s
            timeout: 10s

    # Graphana
    zoo-grafana:
        image: grafana/grafana:11.2.2
        container_name: zoo-grafana
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        ports:
            - "3000:3000"
        volumes:
            - ./zoo-grafana/grafana.ini:/etc/grafana/grafana.ini
            - grafana-data:/var/lib/grafana
        networks:
            - zoo
        depends_on:
            - zoo-prometheus
            - zoo-loki
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=very-secret

    # Jaeger
    zoo-jaeger:
        build:
            context: ./zoo-jaeger
            dockerfile: Dockerfile
        container_name: zoo-jaeger
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:16686 || exit 1"]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        ports:
            - "6831:6831/udp"
            - "16686:16686"
        volumes:
            - jaeger-data:/tmp
        networks:
            - zoo

    zoo-promtail:
        build:
            context: ./zoo-promtail
            dockerfile: Dockerfile
        container_name: zoo-promtail
        ports:
            - "9080:9080"
        volumes:
            # - /var/log:/var/log
            - ${DOCKER_LOG_PATH}:/var/lib/docker/containers:ro
            - ./zoo-promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
        command:
            - --config.file=/etc/promtail/promtail-config.yml
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:9080/ready || exit 1"]
            interval: 60s
            retries: 3
            start_period: 10s
            timeout: 10s
        depends_on:
            - zoo-loki
        networks:
            - zoo

    zoo-loki:
        build:
            context: ./zoo-loki
            dockerfile: Dockerfile
        container_name: zoo-loki
        ports:
            - "3100:3100"
        volumes:
            - ./zoo-loki/local-config.yaml:/etc/loki/local-config.yaml
            - loki-data:/loki
        command:
            - --config.file=/etc/loki/local-config.yaml
        networks:
            - zoo
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:3100/ready || exit 1"]
            interval: 60s
            retries: 3
            start_period: 10s
            timeout: 10s

    # MySQL Service
    zoo-mysql:
        image: mysql:8.0
        container_name: zoo-mysql
        restart: unless-stopped
        ports:
            - "3307:3307"
        environment:
            - MYSQL_DATABASE=zoo-db
            - MYSQL_HOSTNAME=localhost
            - MYSQL_PASSWORD=zoo-pass
            - MYSQL_ROOT_PASSWORD=007
            - MYSQL_TCP_PORT=3307
            - MYSQL_USER=zoo-user
        volumes:
            - mysql-data:/var/lib/mysql
            - ./zoo-mysql/mysql-health.sh:/mysql-health.sh
        # we can set the execute flag as we are running as root
        entrypoint: ["/bin/bash", "-c", "chmod +x /mysql-health.sh && docker-entrypoint.sh mysqld"]
        healthcheck:
            # Test availability of mysql service, listening & actually serving - via mounted script
            test: [ "CMD", "/mysql-health.sh" ]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        networks:
            - zoo

    # Backend written in Python/Flask (python:3.12.5-alpine3.20)
    zoo-python-flask:
        build:
            context: ./zoo-python-flask
            dockerfile: Dockerfile
        container_name: zoo-python-flask
        restart: unless-stopped
        environment:
            - APP_PORT=8100
            - DB_DATABASE=zoo-db
            - DB_HOSTNAME=zoo-mysql
            - DB_PASSWORD=zoo-pass
            - DB_PORT=3307
            - DB_USERNAME=zoo-user
            - DEBUG_MODE=False
            - ENVIRONMENT=docker-compose
            - LOG_LEVEL=DEBUG
            - SERVICE_NAME=zoo-python-flask
        healthcheck:
            # Test availability of gunicorn service, listening & serving - via inline curl request parsed by JQ
            test: ["CMD-SHELL", "response=$$(curl -s http://localhost:8100/graphql/liveness | jq -r '.status'); \
                    if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi"]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        ports:
            - "8100:8100"
        depends_on:
            - zoo-mysql
        networks:
            - zoo

    # Backend written in Python/FastAPI (python:3.12.5-alpine3.20)
    zoo-python-fastapi:
        build:
            context: ./zoo-python-fastapi
            dockerfile: Dockerfile
        container_name: zoo-python-fastapi
        restart: unless-stopped
        environment:
            - APP_PORT=8101
            - DB_DATABASE=zoo-db
            - DB_HOSTNAME=zoo-mysql
            - DB_PASSWORD=zoo-pass
            - DB_PORT=3307
            - DB_USERNAME=zoo-user
            - DEBUG_MODE=False
            - ENVIRONMENT=docker-compose
            - LOG_LEVEL=DEBUG
            - SERVICE_NAME=zoo-python-fastapi
        healthcheck:
            # Test availability of uvicorn service, listening & serving - via inline curl request parsed by JQ
            test: ["CMD-SHELL", "response=$$(curl -s http://localhost:8101/liveness | jq -r '.status'); \
                    if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi"]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        ports:
            - "8101:8101"
        depends_on:
            - zoo-mysql
        networks:
            - zoo

    # Frontend written in TypeScript/React (node:20.18.0-alpine3.20)
    zoo-typescript-react:
        build:
            context: ./zoo-typescript-react
            dockerfile: Dockerfile
        container_name: zoo-typescript-react
        restart: unless-stopped
        environment:
            - ENVIRONMENT=docker-compose
            - LOG_LEVEL=debug
            - NGINX_PORT=8102
            - SERVICE_NAME=zoo-typescript-react
            - BACKEND_HOSTNAME=http://public-api.docker.r7g.org:8120/graphql
        healthcheck:
            # Test availability of nginx service, listening & serving - via inline curl request parsed by JQ
            test: ["CMD-SHELL", "response=$$(curl -s http://localhost:8102/liveness | jq -r '.status'); \
                    if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi"]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        ports:
            - "8102:8102"
        depends_on:
            - zoo-python-flask
        networks:
            - zoo

    # Redis for PHP Metrics and other usages
    zoo-redis:
        container_name: zoo-redis
        build:
            context: ./zoo-redis
            dockerfile: Dockerfile
        healthcheck:
            test: ["CMD-SHELL", "response=$$(redis-cli -u redis://default:zoo-pass@127.0.0.1:6379 ping); \
                    if [ \"$$response\" != \"PONG\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi"]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        env_file:
            - ./zoo-redis/.env
        volumes:
            - redis-data:/data
        ports:
            - "6379:6379"

    # Backend written in PHP/Laravel (php:8.2-fpm)
    zoo-php-laravel:
        build:
            context: ./zoo-php-laravel
            dockerfile: Dockerfile
            args:
                APP_URL: "http://localhost:8003/"
        container_name: zoo-php-laravel
        restart: unless-stopped
        environment:
            - APP_PORT=8103
            - APP_URL=http://localhost:8003/
            - DB_DATABASE=zoo-db
            - DB_HOSTNAME=zoo-mysql
            - DB_PASSWORD=zoo-pass
            - DB_PORT=3307
            - DB_USERNAME=zoo-user
            - ENVIRONMENT=docker-compose
            - LOG_LEVEL=debug
            - SERVICE_NAME=zoo-php-laravel
            - REDIS_HOST=zoo-redis
            - REDIS_PORT=6379
            - REDIS_USERNAME=zoo-user
            - REDIS_PASSWORD=zoo-pass
            - REDIS_BASE=0
        healthcheck:
            # Test availability of php-fpm service, listening & serving - via inline cgi-fcgi request parsed by JQ
            test: ["CMD-SHELL", "response=$$(REQUEST_URI=/health/liveness SCRIPT_FILENAME=/var/www/html/public/index.php REQUEST_METHOD=GET cgi-fcgi -bind -connect 127.0.0.1:8103 | sed -n '/^{/,$$p' | jq -r '.status'); \
                    if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi"]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        ports:
            - "8103:8103"
        depends_on:
            - zoo-mysql
            - zoo-redis
        # we cannot change the execute flag because we are running as www-data, so we add this file and it's permissions in Dockerfile.
        # dont start the migrations before mysql is really ready to serve requests
        command: ["/bin/sh", "-c", "/mysql-wait.sh && php artisan migrate --force && php-fpm"]
        networks:
            - zoo

    # NGINX Service (Reverse Proxy + HTTP to PHP-FPM converter + Static File Serving)
    zoo-php-laravel-http2fpm:
        build:
            context: ./zoo-php-laravel-http2fpm
            dockerfile: Dockerfile
        container_name: zoo-php-laravel-http2fpm
        restart: unless-stopped
        environment:
            - ENVIRONMENT=docker-compose
            - LOG_LEVEL=debug
            - NGINX_PORT=8104
            - SERVICE_NAME=zoo-php-laravel-http2fpm
            - ZOO_PHP_LARAVEL_PORT=8103
        volumes:
            - ./zoo-php-laravel-http2fpm/probe/:/var/www/html/
        healthcheck:
            # Test availability of nginx service, listening & serving - via inline curl request parsed by JQ
            test: ["CMD-SHELL", "response=$$(curl -s http://localhost:8104/liveness | jq -r '.status'); \
                    if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi"]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        depends_on:
            - zoo-php-laravel
        ports:
            - "8104:8104"
        networks:
            - zoo

    # Frontend written in TypeScript/angular (node:20.18.0-alpine3.20)
    zoo-typescript-angular:
        build:
            context: ./zoo-typescript-angular
            dockerfile: Dockerfile
        container_name: zoo-typescript-angular
        restart: unless-stopped
        environment:
            - ENVIRONMENT=docker-compose
            - LOG_LEVEL=debug
            - NGINX_PORT=8105
            - SERVICE_NAME=zoo-typescript-angular
            - BACKEND_HOSTNAME=http://private-api.docker.r7g.org:8120
        healthcheck:
            # Test availability of nginx service, listening & serving - via inline curl request parsed by JQ
            test: ["CMD-SHELL", "response=$$(curl -s http://localhost:8105/liveness | jq -r '.status'); \
                    if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi"]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        ports:
            - "8105:8105"
        depends_on:
            - zoo-php-laravel-http2fpm
        networks:
            - zoo

    # NGINX Service (Routing + Reverse Proxy + Caching + Static File Serving)
    zoo-router:
        build:
            context: ./zoo-router
            dockerfile: Dockerfile
        container_name: zoo-router
        restart: unless-stopped
        environment:
            - ENVIRONMENT=docker-compose
            - NGINX_PORT=8120
            - SERVICE_NAME=zoo-router
            - ZOO_PHP_LARAVEL_HTTP2FPM_PORT=8104
            - ZOO_PYTHON_FASTAPI_PORT=8101
            - ZOO_TYPESCRIPT_ANGULAR_PORT=8105
            - ZOO_TYPESCRIPT_REACT_PORT=8102
        ports:
            - "8120:8120"
        volumes:
            - ./zoo-router/probe/:/var/www/html/
        healthcheck:
            # Test availability of nginx service, listening & serving - via inline curl request compared as is
            test: ["CMD-SHELL", "response=$$(curl -s http://localhost:8120/liveness | jq -r '.status'); \
                    if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi"]
            interval: 60s
            retries: 3
            start_period: 3s
            timeout: 10s
        depends_on:
            - zoo-typescript-react
            - zoo-python-flask
            - zoo-php-laravel-http2fpm
        networks:
            - zoo

# Named volumes for persistent data storage
volumes:
    mysql-data:
        labels:
            com.docker.stack.namespace: zoo-database
    redis-data:
        labels:
            com.docker.stack.namespace: zoo-database
    alert-manager-data:
        labels:
            com.docker.stack.namespace: zoo-monitoring
    grafana-data:
        labels:
            com.docker.stack.namespace: zoo-monitoring
    jaeger-data:
        labels:
            com.docker.stack.namespace: zoo-monitoring
    loki-data:
        labels:
            com.docker.stack.namespace: zoo-monitoring
    prometheus-data:
        labels:
            com.docker.stack.namespace: zoo-monitoring

# Shared network between the containers
networks:
    zoo:
        driver: bridge
