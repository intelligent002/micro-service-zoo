# Named volumes for persistent data storage
volumes:
  zoo-mysql-data:
    name: zoo-mysql-data
  zoo-redis-data:
    name: zoo-redis-data
# Shared network between the containers
networks:
  zoo:
    name: zoo
    driver: bridge

services:

  # MySQL Service
  zoo-mysql:
    container_name: zoo-mysql
    hostname: zoo-mysql
    entrypoint: [ "/bin/bash", "-c", "chmod +x /mysql-health.sh && docker-entrypoint.sh mysqld" ]
    env_file:
      - .env
    healthcheck:
      # Test availability of mysql service, listening & actually serving - via mounted script
      interval: 60s
      retries: 3
      start_period: 3s
      test: [ "CMD", "/mysql-health.sh" ]
      timeout: 10s
    image: mysql:8.0
    networks:
      - zoo
    ports:
      - "3307"
    restart: always
    labels:
      - "traefik.enable=false"
    volumes:
      - zoo-mysql-data:/var/lib/mysql
      - ./zoo-mysql/mysql-health.sh:/mysql-health.sh

  # Backend written in PHP/Laravel (php:8.2-fpm)
  zoo-php-laravel:
    container_name: zoo-php-laravel
    hostname: zoo-php-laravel
    image: ghcr.io/intelligent002/zoo/zoo-php-laravel:latest
    command: [ "/bin/sh", "-c", "set -e && /mysql-wait.sh && php artisan migrate --force && php-fpm" ]
    depends_on:
      - zoo-mysql
      - zoo-redis
    environment:
      - APP_PORT=8103
      - APP_URL=http://localhost:8003/
      - DB_DATABASE=zoo-db
      - DB_HOSTNAME=zoo-mysql
      - DB_PASSWORD=zoo-pass
      - DB_PORT=3307
      - DB_USERNAME=zoo-user
      - ENVIRONMENT=DEVELOPMENT
      - LOG_LEVEL=debug
      - REDIS_BASE=0
      - REDIS_HOST=zoo-redis
      - REDIS_PASSWORD=zoo-pass
      - REDIS_PORT=6379
      - REDIS_USERNAME=zoo-user
      - SERVICE_NAME=zoo-php-laravel
    expose:
      - "8103"
    healthcheck:
      # Test availability of php-fpm service, listening & serving - via inline cgi-fcgi request parsed by JQ
      interval: 60s
      retries: 3
      start_period: 3s
      test: [ "CMD-SHELL", "response=$$(REQUEST_URI=/health/liveness SCRIPT_FILENAME=/var/www/html/public/index.php \
                  REQUEST_METHOD=GET cgi-fcgi -bind -connect 127.0.0.1:8103 | sed -n '/^{/,$$p' | jq -r '.status'); \
                  if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi" ]
      timeout: 10s
    labels:
      - "traefik.enable=false"
    networks:
      - zoo
    restart: always

  # NGINX Service (Reverse Proxy + HTTP to PHP-FPM converter + Static File Serving)
  zoo-php-laravel-http2fpm:
    container_name: zoo-php-laravel-http2fpm
    hostname: zoo-php-laravel-http2fpm
    image: ghcr.io/intelligent002/zoo/zoo-php-laravel-http2fpm:latest
    depends_on:
      - zoo-php-laravel
    environment:
      - ENVIRONMENT=DEVELOPMENT
      - LOG_LEVEL=debug
      - NGINX_PORT=8104
      - SERVICE_NAME=zoo-php-laravel-http2fpm
      - ZOO_PHP_LARAVEL_PORT=8103
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.zoo-php-laravel-http2fpm.loadbalancer.server.port=8104"
      - "traefik.http.routers.zoo-php-laravel-http2fpm.rule=Host(`private-api.docker.r7g.org`)"
      - "traefik.http.routers.zoo-php-laravel-http2fpm.entrypoints=web"
      #- "traefik.http.routers.zoo-php-laravel-http2fpm.middlewares=redirect-to-https"
      #- "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      #- "traefik.http.routers.zoo-php-laravel-http2fpm-secure.rule=Host(`zoo-php-laravel-http2fpm.docker.r7g.org`)"
      #- "traefik.http.routers.zoo-php-laravel-http2fpm-secure.entrypoints=websecure"
      #- "traefik.http.routers.zoo-php-laravel-http2fpm-secure.tls.certresolver=myresolver"
    expose:
      - "8104"
    healthcheck:
      # Test availability of nginx service, listening & serving - via inline curl request parsed by JQ
      interval: 60s
      retries: 3
      start_period: 3s
      test: [ "CMD-SHELL", "response=$$(curl -s http://localhost:8104/liveness | jq -r '.status'); \
                  if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi" ]
      timeout: 10s
    networks:
      - zoo
    restart: always
    volumes:
      - ./zoo-php-laravel-http2fpm/probe/:/var/www/html/

  # Backend written in Python/FastAPI (python:3.12.5-alpine3.20)
  zoo-python-fastapi:
    container_name: zoo-python-fastapi
    hostname: zoo-python-fastapi
    image: ghcr.io/intelligent002/zoo/zoo-python-fastapi:latest
    depends_on:
      - zoo-mysql
    environment:
      - APP_PORT=8101
      - DB_DATABASE=zoo-db
      - DB_HOSTNAME=zoo-mysql
      - DB_PASSWORD=zoo-pass
      - DB_PORT=3307
      - DB_USERNAME=zoo-user
      - DEBUG_MODE=False
      - ENVIRONMENT=DEVELOPMENT
      - LOG_LEVEL=DEBUG
      - SERVICE_NAME=zoo-python-fastapi
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.zoo-python-fastapi.loadbalancer.server.port=8101"
      - "traefik.http.routers.zoo-python-fastapi.rule=Host(`public-api.docker.r7g.org`)"
      - "traefik.http.routers.zoo-python-fastapi.entrypoints=web"
      #- "traefik.http.routers.zoo-python-fastapi.middlewares=redirect-to-https"
      #- "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      #- "traefik.http.routers.zoo-python-fastapi-secure.rule=Host(`zoo-python-fastapi.docker.r7g.org`)"
      #- "traefik.http.routers.zoo-python-fastapi-secure.entrypoints=websecure"
      #- "traefik.http.routers.zoo-python-fastapi-secure.tls.certresolver=myresolver"
    expose:
      - "8101"
    healthcheck:
      # Test availability of uvicorn service, listening & serving - via inline curl request parsed by JQ
      interval: 60s
      retries: 3
      start_period: 3s
      test: [ "CMD-SHELL", "response=$$(curl -s http://localhost:8101/liveness | jq -r '.status'); \
                  if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi" ]
      timeout: 10s
    networks:
      - zoo
    restart: always

  # Redis for PHP Metrics and other usages
  zoo-redis:
    container_name: zoo-redis
    hostname: zoo-redis
    image: ghcr.io/intelligent002/zoo/zoo-redis:latest
    env_file:
      - .env
    healthcheck:
      # Test availability of Redis service, listening & serving - via inline redis-cli request
      interval: 60s
      retries: 3
      start_period: 3s
      test: [ "CMD-SHELL", "response=$$(redis-cli -u redis://default:zoo-pass@127.0.0.1:6379 ping); \
                  if [ \"$$response\" != \"PONG\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi" ]
      timeout: 10s
    networks:
      - zoo
    ports:
      - "6379"
    restart: always
    labels:
      - "traefik.enable=false"
    volumes:
      - zoo-redis-data:/data

# NGINX Service (Routing + Reverse Proxy + Caching + Static File Serving)
#  zoo-router:
#    image: ghcr.io/intelligent002/zoo/zoo-router:latest
#    depends_on:
#      zoo-typescript-angular:
#        condition: service_healthy
#        restart: false
#      zoo-typescript-react:
#        condition: service_healthy
#        restart: false
#      zoo-python-flask:
#        condition: service_healthy
#        restart: false
#      zoo-php-laravel-http2fpm:
#        condition: service_healthy
#        restart: false
#    environment:
#      - ENVIRONMENT=DEVELOPMENT
#      - NGINX_PORT=8120
#      - SERVICE_NAME=zoo-router
#      - ZOO_PYTHON_FASTAPI_PORT=8101
#      - ZOO_TYPESCRIPT_REACT_PORT=8102
#      - ZOO_PHP_LARAVEL_HTTP2FPM_PORT=8104
#      - ZOO_TYPESCRIPT_ANGULAR_PORT=8105
#    healthcheck:
#      # Test availability of nginx service, listening & serving - via inline curl request compared as is
#      interval: 60s
#      retries: 3
#      start_period: 3s
#      test: [ "CMD-SHELL", "response=$$(curl -s http://localhost:8120/liveness | jq -r '.status'); \
#                  if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi" ]
#      timeout: 10s
#    networks:
#      - zoo
#    ports:
#      - "8120:8120"
#    restart: always
#    volumes:
#      - ./zoo-router/probe/:/var/www/html/

  # Traefik reverse proxy
  zoo-traefik:
    container_name: zoo-traefik
    hostname: zoo-traefik
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=zoo"
      - "--entrypoints.web.address=:80"
      #- "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - zoo
    restart: always

  # Frontend written in TypeScript/React (node:20.18.0-alpine3.20)
  zoo-typescript-react:
    container_name: zoo-typescript-react
    hostname: zoo-typescript-react
    image: ghcr.io/intelligent002/zoo/zoo-typescript-react:latest
    depends_on:
      - zoo-python-fastapi
    environment:
      - BACKEND_HOSTNAME=http://public-api.docker.r7g.org/graphql
      - ENVIRONMENT=DEVELOPMENT
      - LOG_LEVEL=debug
      - NGINX_PORT=8102
      - SERVICE_NAME=zoo-typescript-react
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.zoo-typescript-react.loadbalancer.server.port=8102"
      - "traefik.http.routers.zoo-typescript-react.rule=Host(`public.docker.r7g.org`)"
      - "traefik.http.routers.zoo-typescript-react.entrypoints=web"
      #- "traefik.http.routers.zoo-typescript-react.middlewares=redirect-to-https"
      #- "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      #- "traefik.http.routers.zoo-typescript-react-secure.rule=Host(`zoo-typescript-react.docker.r7g.org`)"
      #- "traefik.http.routers.zoo-typescript-react-secure.entrypoints=websecure"
      #- "traefik.http.routers.zoo-typescript-react-secure.tls.certresolver=myresolver"
    expose:
      - "8102"
    healthcheck:
      # Test availability of nginx service, listening & serving - via inline curl request parsed by JQ
      interval: 60s
      retries: 3
      start_period: 3s
      test: [ "CMD-SHELL", "response=$$(curl -s http://localhost:8102/liveness | jq -r '.status'); \
                  if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi" ]
      timeout: 10s
    networks:
      - zoo
    restart: always

  # Frontend written in TypeScript/angular (node:20.18.0-alpine3.20)
  zoo-typescript-angular:
    container_name: zoo-typescript-angular
    hostname: zoo-typescript-angular
    image: ghcr.io/intelligent002/zoo/zoo-typescript-angular:latest
    depends_on:
      - zoo-php-laravel-http2fpm
    environment:
      - BACKEND_HOSTNAME=http://private-api.docker.r7g.org
      - ENVIRONMENT=DEVELOPMENT
      - LOG_LEVEL=debug
      - NGINX_PORT=8105
      - SERVICE_NAME=zoo-typescript-angular
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.zoo-typescript-angular.loadbalancer.server.port=8105"
      - "traefik.http.routers.zoo-typescript-angular.rule=Host(`private.docker.r7g.org`)"
      - "traefik.http.routers.zoo-typescript-angular.entrypoints=web"
      #- "traefik.http.routers.zoo-typescript-angular.middlewares=redirect-to-https"
      #- "traefik.http.middlewares.redirect-to-angular.redirectscheme.scheme=https"
      #- "traefik.http.routers.zoo-typescript-angular-secure.rule=Host(`zoo-typescript-angular.docker.r7g.org`)"
      #- "traefik.http.routers.zoo-typescript-angular-secure.entrypoints=websecure"
      #- "traefik.http.routers.zoo-typescript-angular-secure.tls.certresolver=myresolver"
    expose:
      - "8105"
    healthcheck:
      # Test availability of nginx service, listening & serving - via inline curl request parsed by JQ
      interval: 60s
      retries: 3
      start_period: 3s
      test: [ "CMD-SHELL", "response=$$(curl -s http://localhost:8105/liveness | jq -r '.status'); \
                  if [ \"$$response\" != \"OK\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi" ]
      timeout: 10s
    networks:
      - zoo
    restart: always
